use std::collections::HashMap;


trait SortByKey<K, V> {
    fn sort_by_key(&mut self);
}

impl<K: Ord, V> SortByKey<K, V> for HashMap<K, V> {
    fn sort_by_key(&mut self) {
        let mut keys: Vec<_> = self.keys().cloned().collect();
        keys.sort();

        let mut sorted_map = HashMap::new();
        for key in keys {
            if let Some(value) = self.remove(&key) {
                sorted_map.insert(key, value);
            }
        }

        *self = sorted_map;
    }
}

fn main() {
    let mut my_map: HashMap<i32, &str> = HashMap::new();

    my_map.insert(3, "apple");
    my_map.insert(1, "banana");
    my_map.insert(2, "cherry");
    my_map.insert(5, "date");
    my_map.insert(4, "grape");

    println!("Original map: {:?}", my_map);

    my_map.sort_by_key();

    println!("Sorted map: {:?}", my_map);
}
